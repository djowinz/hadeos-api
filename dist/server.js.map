{"version":3,"sources":["webpack://buttonmus-prime-api/./src/main.ts","webpack://buttonmus-prime-api/./src/type-defs.ts","webpack://buttonmus-prime-api/./src/utils/environment.ts","webpack://buttonmus-prime-api/external \"apollo-server\"","webpack://buttonmus-prime-api/external \"dotenv\"","webpack://buttonmus-prime-api/webpack/bootstrap","webpack://buttonmus-prime-api/webpack/runtime/compat get default export","webpack://buttonmus-prime-api/webpack/runtime/define property getters","webpack://buttonmus-prime-api/webpack/runtime/hasOwnProperty shorthand","webpack://buttonmus-prime-api/webpack/runtime/make namespace object","webpack://buttonmus-prime-api/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;AAA6C;AACK;AACf;AACnC,mBAAmB,uDAAY;AAC/B,iBAAiB;AACjB,YAAY;AACZ,gBAAgB,6EAA6B;AAC7C;AACA;AACA,KAAK;AACL,CAAC;AACD,cAAc,gEAAgB;AAC9B,YAAY,MAAM;AAClB,mCAAmC,IAAI;AACvC,CAAC;AACD,IAAI,KAAU,EAAE,EAGf;;;;;;;;;;;;;;;;;AClBmC;AACpC,iEAAe,8CAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACnDF,kDAAwB;AACxB;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;ACjB3B,2C;;;;;;;;;;ACAA,oC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"server.js","sourcesContent":["import { ApolloServer } from 'apollo-server';\nimport { environment } from './utils/environment';\nimport typeDefs from './type-defs';\nconst server = new ApolloServer({\n    resolvers: {},\n    typeDefs,\n    playground: environment.apollo.playground,\n    cacheControl: {\n        defaultMaxAge: 0,\n    },\n});\nserver.listen(environment.port)\n    .then(({ url }) => {\n    console.log(`Server ready at ${url}. `);\n});\nif (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => server.stop());\n}\n","import { gql } from 'apollo-server';\nexport default gql `\n  type User {\n      id: String!\n      accountType: String\n      email: String!\n      createdAt: Int!\n      updatedAt: Int\n      devices: [Device]\n      scripts: [Script]\n  }\n  type Device {\n      id: String!\n      deviceId: String!\n      ownerId: String!\n      owner: User\n      lastActivity: Int\n      createdAt: Int\n      updatedAt: Int\n  }\n  type Script {\n      id: String!\n      ownerId: String!\n      owner: User\n      name: String!\n      description: String\n      functionBody: String!\n      createdAt: Int!\n      updatedAt: Int\n      sharable: Boolean\n      favorites: Int\n  }\n  type ScriptExecution {\n      id: String!\n      scriptId: String!\n      script: Script\n      state: String\n      createdAt: Int!\n      deviceId: String\n      device: Device\n  }\n  type Query {\n    user(id: String!): User\n    users: [User]\n    admins: [User]\n    script(id: String!): Script\n    scripts(ownerId: String!): [Script]\n    device(id: String!): Device\n    devices(ownerId: String!): [Device]\n    executions(scriptId: String!): [ScriptExecution]\n  }\n`;\n","require('dotenv').config();\nconst defaultPort = 4000;\nexport const environment = {\n    apollo: {\n        introspection: process.env.APOLLO_INTROSPECTION === 'true',\n        playground: process.env.APOLLO_PLAYGROUND === 'true'\n    },\n    postgres: {\n        host: process.env.PGHOST || 'localhost',\n        user: process.env.PGUSER || '',\n        password: process.env.PGPASSWORD || '',\n        database: process.env.PGDATABSE || 'public',\n        port: Number(process.env.PGPORT) || 5432,\n    },\n    migrate: process.env.MIGRATE === 'true',\n    port: process.env.PORT || defaultPort\n};\nexport default environment;\n","module.exports = require(\"apollo-server\");;","module.exports = require(\"dotenv\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/main.ts\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}